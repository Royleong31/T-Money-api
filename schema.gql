# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserInfo {
  id: String!
  firstName: String!
  lastName: String!
  dateOfBirth: String!
  country: String!
  postcode: String!
  occupation: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Balance {
  amount: Float!
  currency: Currency!
}

enum Currency {
  USD
  SGD
}

type User {
  id: String!
  username: String!
  email: String!
  emailVerificationSentAt: DateTime
  emailVerified: Boolean!
  accountType: AccountType!
  userInfo: UserInfo!
  businessInfo: BusinessInfo
  balances: [Balance!]!
  updatedAt: DateTime!
  createdAt: DateTime!
}

enum AccountType {
  INDIVIDUAL
  BUSINESS
}

type BusinessInfo {
  id: String!
  name: String!
  uen: String!
  country: String!
  postalCode: String!
  address: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type PayPalDeposit {
  id: String!
  paypalCheckoutId: String
  currency: Currency!
  amount: Float!
  userId: String!
  user: User!
  fees: Float
  status: PayPalStatus!
  updatedAt: DateTime!
  createdAt: DateTime!
}

enum PayPalStatus {
  BEFORE_REQUEST
  PENDING
  COMPLETED
  FAILED
}

type PayPalWithdraw {
  id: String!
  paypalPaymentId: String
  currency: Currency!
  amount: Float!
  userId: String!
  user: User!
  status: PayPalStatus!
  fees: Float
  updatedAt: DateTime!
  createdAt: DateTime!
}

type MerchantPayment {
  id: String!
  orderId: String!
  customerId: String
  customer: User
  merchantId: String!
  merchant: User
  amount: Float!
  currency: Currency!
  merchantPaymentStatus: MerchantPaymentStatus!
  updatedAt: DateTime!
  createdAt: DateTime!
}

enum MerchantPaymentStatus {
  PENDING
  COMPLETED
  EXPIRED
}

type Transaction {
  id: String!
  userId: String!
  currency: Currency!
  amount: Float!
  type: TransactionType!
  updatedAt: DateTime!
  createdAt: DateTime!
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  INTERNAL_TRANSFER_SENT
  INTERNAL_TRANSFER_RECEIVED
  MERCHANT_PAYMENT_RECEIVED
  MERCHANT_PAYMENT_SENT
  WITHDRAWAL_REFUND
}

type InternalTransfer {
  id: String!
  senderId: String!
  sender: User!
  amount: Float!
  currency: Currency!
  receiverId: String!
  receiver: User!
  note: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type AuthPayload {
  accessToken: String!
}

type TransactionDetails {
  transactionsIn: [Transaction!]!
  transactionsOut: [Transaction!]!
}

type TransactionSummary {
  amountIn: Float!
  amountOut: Float!
}

type Query {
  hello: String!
  me: User!
  transactions(fromDate: DateTime!, toDate: DateTime!, currency: Currency!): TransactionDetails!
  getTransactionSummary(fromDate: DateTime!, toDate: DateTime!, currency: Currency!): TransactionSummary!
  merchantGetQRDetails(id: String!): MerchantPayment!
  getInternalTransfer(id: String!): InternalTransfer!
}

type Mutation {
  registerBusiness(username: String!, email: String!, password: String!, firstName: String!, lastName: String!, dateOfBirth: String!, country: String!, postcode: String!, occupation: String!, businessName: String!, uen: String!, businessCountry: String!, businessPostcode: String!, businessAddress: String!): AuthPayload!
  registerIndividual(username: String!, email: String!, password: String!, firstName: String!, lastName: String!, dateOfBirth: String!, country: String!, postcode: String!, occupation: String!): AuthPayload!
  login(usernameOrEmail: String!, password: String!, accountType: AccountType!): AuthPayload!
  requestDeposit(amount: Float!, currency: Currency!): PayPalDeposit!
  confirmDeposit(paypalCheckoutId: String!): PayPalDeposit!
  requestWithdraw(amount: Float!, currency: Currency!, paypalEmail: String!): PayPalWithdraw!
  merchantRequestQR(orderId: String!, amount: Float!, currency: Currency!): MerchantPayment!
  merchantPayQR(id: String!): MerchantPayment!
  makeInternalTransfer(amount: Float!, currency: Currency!, toUsername: String!, note: String!): InternalTransfer!
}